// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: track/track.proto

package track

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Track_Search_FullMethodName    = "/track.Track/Search"
	Track_Download_FullMethodName  = "/track.Track/Download"
	Track_Save_FullMethodName      = "/track.Track/Save"
	Track_GetTracks_FullMethodName = "/track.Track/GetTracks"
)

// TrackClient is the client API for Track service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackClient interface {
	Search(ctx context.Context, in *SearchTrackRequest, opts ...grpc.CallOption) (*SearchTracksResponse, error)
	Download(ctx context.Context, in *DownloadTrackRequest, opts ...grpc.CallOption) (*Empty, error)
	Save(ctx context.Context, in *SaveTrackRequest, opts ...grpc.CallOption) (*Empty, error)
	GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksResponse, error)
}

type trackClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackClient(cc grpc.ClientConnInterface) TrackClient {
	return &trackClient{cc}
}

func (c *trackClient) Search(ctx context.Context, in *SearchTrackRequest, opts ...grpc.CallOption) (*SearchTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTracksResponse)
	err := c.cc.Invoke(ctx, Track_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackClient) Download(ctx context.Context, in *DownloadTrackRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Track_Download_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackClient) Save(ctx context.Context, in *SaveTrackRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Track_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackClient) GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTracksResponse)
	err := c.cc.Invoke(ctx, Track_GetTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServer is the server API for Track service.
// All implementations must embed UnimplementedTrackServer
// for forward compatibility.
type TrackServer interface {
	Search(context.Context, *SearchTrackRequest) (*SearchTracksResponse, error)
	Download(context.Context, *DownloadTrackRequest) (*Empty, error)
	Save(context.Context, *SaveTrackRequest) (*Empty, error)
	GetTracks(context.Context, *GetTracksRequest) (*GetTracksResponse, error)
	mustEmbedUnimplementedTrackServer()
}

// UnimplementedTrackServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackServer struct{}

func (UnimplementedTrackServer) Search(context.Context, *SearchTrackRequest) (*SearchTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTrackServer) Download(context.Context, *DownloadTrackRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedTrackServer) Save(context.Context, *SaveTrackRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedTrackServer) GetTracks(context.Context, *GetTracksRequest) (*GetTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (UnimplementedTrackServer) mustEmbedUnimplementedTrackServer() {}
func (UnimplementedTrackServer) testEmbeddedByValue()               {}

// UnsafeTrackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackServer will
// result in compilation errors.
type UnsafeTrackServer interface {
	mustEmbedUnimplementedTrackServer()
}

func RegisterTrackServer(s grpc.ServiceRegistrar, srv TrackServer) {
	// If the following call pancis, it indicates UnimplementedTrackServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Track_ServiceDesc, srv)
}

func _Track_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Track_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).Search(ctx, req.(*SearchTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Track_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Track_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).Download(ctx, req.(*DownloadTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Track_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Track_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).Save(ctx, req.(*SaveTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Track_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Track_GetTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).GetTracks(ctx, req.(*GetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Track_ServiceDesc is the grpc.ServiceDesc for Track service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Track_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "track.Track",
	HandlerType: (*TrackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Track_Search_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _Track_Download_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Track_Save_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _Track_GetTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track/track.proto",
}
